package com.tousif.crud_demo;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.service.ServiceRegistryBuilder;

public class CriteriaDemo {

	public static void main(String[] args) {

//<--------------------------------------------------------------------------------------------------->
//		Configuration config = new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Student.class);
//		ServiceRegistry reg = new ServiceRegistryBuilder().applySettings(config.getProperties()).buildServiceRegistry();
//		SessionFactory sf = config.buildSessionFactory(reg);
//		Session session = sf.openSession();

//<--------------------------------------------------------------------------------------------------->
								//LONG WAY....

		Configuration config = new Configuration();
		config.configure("hibernate.cfg.xml");
		config.addAnnotatedClass(Student.class);
		
		ServiceRegistryBuilder srb = new ServiceRegistryBuilder();
		
		ServiceRegistry reg = srb.applySettings(config.getProperties()).buildServiceRegistry();
		
		SessionFactory sf = config.buildSessionFactory(reg);
		Session session = sf.openSession();

//<--------------------------------------------------------------------------------------------------->

		session.beginTransaction();
		System.out.println("Transaction Started");
		
//<--------------------------------------------------------------------------------------------------->
		
//						CRITERIA QUARIES :	
//  	Simply return every object FROM TABLE that corresponds to that class.
		
//		PROVIDE PROPERTY_NAME FRO CLASS, NOT FROM TABLE
		
//		FIRES QUERY ONLY WHEN WE PRINT IT OR USE IT, WON'T FIRE QUERY IF WE WON'T USE IT
		
		
/*		Hibernate provides alternate ways of manipulating objects and in turn data available in RDBMS tables.
		One of the methods is Criteria API,
		which allows you to build up a criteria query object programmatically
		where you can apply filtration rules and logical conditions.

		The Hibernate Session interface provides createCriteria() method,
		which can be used to create a Criteria object
		that returns instances of the persistence object's class when your application executes a criteria query.
*/
		Criteria cr1 = session.createCriteria(Student.class);
		List<Student> student1 = cr1.list();

		for(Student s : student1) {
			System.out.println(s);
		}
		
		System.out.println();
		
//		RESTRICTIONS WITH CRITERIA
		
//		You can use add() method available for Criteria object to add restriction for a criteria query.
//		Following are the example to add a restriction to return the records with criteria
		
//		Where ID Equalts to 7
		cr1.add(Restrictions.idEq(7));
		System.out.println(cr1.list());
		System.out.println();
		
		
		Criteria cr2 = session.createCriteria(Student.class);
		
//		Where Marks > 30
		cr2.add(Restrictions.gt("marks", 30));

//		Where Marks <70 
		cr2.add(Restrictions.lt("marks", 70));
		
		List<Student> student2 = cr2.list();
		for(Student s : student2) {
			System.out.println(s);
		}
		
//QUERY GENERATED BY HIBERNATE : (BOTH RESTRICTIONS ARE JOINED BY AND)
/*		select this_.student_rollno as student1_0_0_, this_.student_marks as student2_0_0_, this_.student_name as student3_0_0_
			from Student this_ where
					this_.student_marks>?
					AND
					this_.student_marks<?
*/
	
		
		Criteria cr3 = session.createCriteria(Student.class);
		cr3.setProjection(Projections.sum("marks"));
		System.out.println(cr3.list());
		System.out.println();
		
/*		select sum(this_.student_marks) as y0_ from Student this_
*/




		
		
//<--------------------------------------------------------------------------------------------------->
		session.getTransaction().commit();
		System.out.println("Transaction Completed");

		
		
	}

}
